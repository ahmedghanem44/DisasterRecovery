{"version":3,"sources":["TimeSheet.js","App.js","serviceWorker.js","index.js"],"names":["TimeSheet","props","addRow","setState","prevState","timesheet_info","state","console","log","handleSubmit","e","preventDefault","i","length","this","rows_to_render","map","elem","tsr","Fragment","style","padding","paddingTop","float","onChange","event","target","value","marginLeft","marginRight","onSubmit","paddingRight","type","height","paddingLeft","id","boxSizing","backgroundColor","borderStyle","borderColor","margin","fontSize","listStyleType","position","right","onClick","left","React","Component","App","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQA4FeA,M,YAvFd,WAAYC,GACX,IAAD,8BACC,4CAAMA,KA4BPC,OAAS,WAGR,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BC,eAAe,GAAD,mBAAM,EAAKC,MAAMD,gBAAjB,CAAiC,CAAC,aAAe,KAAM,WAAW,KAAM,MAAQ,WAEhGE,QAAQC,IAAI,iBAnCb,EAsCAC,aAAe,SAACC,GAEfA,EAAEC,iBACF,IAAI,IAAIC,EAAE,EAAEA,EAAE,EAAKN,MAAMD,eAAeQ,OAAOD,IAE9CL,QAAQC,IAAI,EAAKF,MAAMD,eAAeO,KAzCvC,EAAKN,MAAQ,CAACD,eAAe,IAF9B,E,iFAOCS,KAAKZ,W,+BAKL,IAAIa,EAAiBD,KAAKR,MAAMD,eAAeW,IAAI,SAACC,GAAD,OAwC9BC,EAxCqDD,EA2C1E,kBAAC,IAAME,SAAP,KACA,4BACC,yBAAKC,MAAO,CAACC,QAAQ,MAAOC,WAAW,MAAOC,MAAM,SACnD,uBAAGH,MAAO,CAACG,MAAM,SAAjB,aACA,4BAAQH,MAAO,CAACG,MAAM,OAAQF,QAAQ,OAAQG,SAAU,SAAUC,GAAOP,EAAI,gBAAkBO,EAAMC,OAAOC,QAC3G,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,SAED,0BAAMP,MAAO,CAACG,MAAM,OAAQK,WAAW,OAAQC,YAAY,QAASC,SAAU,SAAUpB,GAAGA,EAAEC,mBAA7F,gBAEC,2BAAOS,MAAO,CAACW,aAAa,OAAQC,KAAK,SACzCR,SAAU,SAAAd,GAAC,OAAIQ,EAAI,YAAcR,EAAEgB,OAAOC,UAG3C,0BAAMP,MAAO,CAACa,OAAO,OAAQC,YAAY,SAAUJ,SAAU,SAAUpB,GAAGA,EAAEC,mBAA5E,SAEC,2BAAOqB,KAAK,SACZR,SAAU,SAAAd,GAAC,OAAIQ,EAAG,MAAYR,EAAEgB,OAAOC,aArB5C,IAAuBT,IAvCrB,OACC,yBAAKE,MAAO,CAACC,QAAQ,SACpB,yBAAKc,GAAG,wBAAwBf,MAAO,CAACgB,UAAU,aAAcC,gBAAgB,UAC/EC,YAAY,QAASC,YAAY,UAAWC,OAAO,SACnD,uBAAGpB,MAAO,CAACqB,SAAS,OAAQpB,QAAQ,SAApC,eACA,wBAAID,MAAO,CAACsB,cAAc,SACxB3B,GAEF,4BAAQK,MAAO,CAACuB,SAAS,WAAYC,MAAM,OAAQJ,OAAO,QAASK,QAAS/B,KAAKZ,QAAjF,cAGD,4BAAQkB,MAAO,CAACoB,OAAO,OAAQG,SAAS,WAAYG,KAAK,QAASD,QAAS/B,KAAKL,cAAhF,e,GA3BoBsC,IAAMC,WCSfC,MARf,WACE,OACA,yBAAKd,GAAG,iBAAiBf,MAAO,CAAC8B,MAAM,SACtC,kBAAC,EAAD,QCKiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.fec5c979.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass TimeSheet extends React.Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {timesheet_info:[]}\r\n\t}\r\n\t\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tthis.addRow();\r\n\t}\r\n\t\r\n\trender()\r\n\t{\r\n\t\tlet rows_to_render = this.state.timesheet_info.map((elem) => TimeSheetRow(elem));\r\n\t\treturn(\r\n\t\t\t<div style={{padding:\"30px\"}}>\r\n\t\t\t\t<div id=\"labor_input_container\" style={{boxSizing:\"border-box\", backgroundColor:\"#EEEEEE\", \r\n\t\t\t\t\tborderStyle:\"solid\", borderColor:\"#AAAAAA\", margin:\"20px\"}}>\r\n\t\t\t\t\t<p style={{fontSize:\"20px\", padding:\"10px\"}}>Labor Entry</p>\r\n\t\t\t\t\t<ul style={{listStyleType:\"none\"}}>\r\n\t\t\t\t\t\t{rows_to_render}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<button style={{position:\"absolute\", right:\"30px\", margin:\"20px\"}} onClick={this.addRow}>Add a Row</button>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t</div>\t\r\n\t\t\t\t<button style={{margin:\"30px\", position:\"relative\", left:\"20px\"}} onClick={this.handleSubmit}>Submit</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\t\r\n\taddRow = () =>\r\n\t{\r\n\t\t\r\n\t\tthis.setState(prevState => ({\r\n\t\t  timesheet_info: [...this.state.timesheet_info, {\"machine_code\":null, \"hrs used\":null, \"total\":null}]\r\n\t\t}))\r\n\t\tconsole.log(\"adding a row\")\r\n\t}\r\n\t\r\n\thandleSubmit = (e) =>\r\n\t{\r\n\t\te.preventDefault();\r\n\t\tfor(let i=0;i<this.state.timesheet_info.length;i++)\r\n\t\t{\r\n\t\t\tconsole.log(this.state.timesheet_info[i])\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\nfunction TimeSheetRow (tsr)\r\n{\r\n\treturn(\r\n\t\t<React.Fragment>\r\n\t\t<li>\r\n\t\t\t<div style={{padding:\"5px\", paddingTop:\"0px\", float:\"none\"}}>\r\n\t\t\t\t<p style={{float:\"left\"}}>Job Code:</p>\r\n\t\t\t\t<select style={{float:\"left\", padding:\"1px\"}} onChange={function (event){tsr[\"machine code\"] = event.target.value;}}>\r\n\t\t\t\t\t<option value=\"opt1\">opt1</option>\r\n\t\t\t\t\t<option value=\"opt2\">opt2</option>\r\n\t\t\t\t\t<option value=\"opt3\">opt3</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t<form style={{float:\"left\", marginLeft:\"50px\", marginRight:\"50px\"}} onSubmit={function (e){e.preventDefault();}}>\r\n\t\t\t\t\tHours Worked: \r\n\t\t\t\t\t<input style={{paddingRight:\"5px\"}} type=\"number\" \r\n\t\t\t\t\tonChange={e => tsr[\"hrs used\"] = e.target.value}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t\t<form style={{height:\"30px\", paddingLeft:\"100px\"}} onSubmit={function (e){e.preventDefault();}}>\r\n\t\t\t\t\tTotal:\r\n\t\t\t\t\t<input type=\"number\" \r\n\t\t\t\t\tonChange={e => tsr[\"total\"] = e.target.value}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t\t\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\nexport default TimeSheet;","import React from 'react';\nimport './App.css';\nimport TimeSheet from './TimeSheet'\n\nfunction App() {\n  return (\n\t\t<div id=\"main_container\" style={{width:\"100%\"}}>\n\t\t\t<TimeSheet />\n\t\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}